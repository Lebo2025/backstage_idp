trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: '${{ values.azureSubscription }}'
  resourceGroupName: '${{ values.resourceGroup }}'
  webAppName: '${{ values.name }}'
  appServicePlan: '${{ values.appServicePlan }}'

stages:
- stage: Infrastructure
  displayName: Deploy Infrastructure
  jobs:
  - job: Terraform
    displayName: Terraform Deploy
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'
    
    - task: AzureCLI@2
      displayName: 'Terraform Init & Apply'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          cd terraform
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
        workingDirectory: '$(System.DefaultWorkingDirectory)'

- stage: Build
  displayName: Build Application
  dependsOn: Infrastructure
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
    
    - script: |
        npm install
        npm run build
      displayName: 'npm install and build'
    
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    
    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'webApp'
              appName: $(webAppName)
              resourceGroupName: $(resourceGroupName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip